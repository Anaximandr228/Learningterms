import telebot
from telebot import types
import sqlite3
import random

API_TOKEN = ''
bot = telebot.TeleBot(API_TOKEN)

list = []
list2 = []
list4 = []
con = sqlite3.connect("terms.db", check_same_thread=False)
cursor = con.cursor()


@bot.message_handler(commands=['start'])
def start(message):
    database(con)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üîé–£—á–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
    btn2 = types.KeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
    btn3 = types.KeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
    btn4 = types.KeyboardButton("üìï–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã")

    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤".format(
                         message.from_user), reply_markup=markup)


@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, text= f"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω—á–µ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ª—é–±—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ \n"
                                            f"–ö–Ω–æ–ø–∫–∞ 'üîé–£—á–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö "
                                            f"\—Ç–µ—Ä–º–∏–Ω–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–µ—Ä–º–∏–Ω–∞\n"
                                            f"–ö–Ω–æ–ø–∫–∞ '‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞, "
                                            f"–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —É—á–∏—Ç—å\n"
                                            f"–ö–Ω–æ–ø–∫–∞ '‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ–≥–æ "
                                            f"—Ç–µ—Ä–º–∏–Ω–∞, –∏–ª–∏ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è\n"
                                            f"–ö–Ω–æ–ø–∫–∞ 'üìï–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤—Å–µ—Ö "
                                            f"–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤")


@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "üîé–£—á–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã"):
        markup1 = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("–í —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ", callback_data="random")
        btn2 = types.InlineKeyboardButton("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω", callback_data="search")
        markup1.add(btn1, btn2)
        bot.send_message(message.chat.id,
                         text="–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å?".format(
                             message.from_user), reply_markup=markup1)

    elif (message.text == "‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã"):
        markup2 = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("–í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã", callback_data="deleteall")
        btn2 = types.InlineKeyboardButton("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ—Ä–º–∏–Ω–∞", callback_data="delete")
        markup2.add(btn1, btn2)
        bot.send_message(message.chat.id,
                         text="–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?".format(
                             message.from_user), reply_markup=markup2)

    elif (message.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
        bot.register_next_step_handler(message, terminname)

    elif (message.text == "üìï–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã"):
        cursor.execute("SELECT * FROM term")
        terminlist = cursor.fetchall()
        value = len(terminlist)
        if value == 0:
            bot.send_message(message.chat.id, text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞")
        else:
            bot.send_message(message.chat.id, text="–í–∞—à–∏ —Ç–µ—Ä–º–∏–Ω—ã:")
            for str in terminlist:
                bot.send_message(message.chat.id, text=(f"{str[1]} ‚Äî {str[2]}"))

    elif (message.text == "‚¨Ö–ù–∞–∑–∞–¥"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üîé–£—á–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
        btn2 = types.KeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
        btn3 = types.KeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
        btn4 = types.KeyboardButton("üìï–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã")
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".format(
            message.from_user), reply_markup=markup)

    elif (message.text == "–£—á–∏—Ç—å c–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω‚û°"):
        bot.send_message(message.chat.id, "–ò–¥—ë–º –¥–∞–ª—å—à–µ")
        randomlearn(message)


def terminname(message):
    list.append(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ—Ä–º–∏–Ω–∞")
    bot.register_next_step_handler(message, termintext)


def termintext(message):
    list.append(message.text)
    cursor.execute("INSERT INTO term (termin, termintext) VALUES (?, ?)", (str(list[0]), str(list[1])))
    list.clear()
    con.commit()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã")
    button2 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥")
    markup.add(button1, button2)
    bot.send_message(message.chat.id, "‚úî–¢–µ—Ä–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == 'deleteall':
        cursor.execute("DROP TABLE term")
        database(con)
        con.commit()
        bot.send_message(call.message.chat.id, "‚úî–í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

    if call.data == 'delete':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
        bot.register_next_step_handler(call.message, deletename)

    if call.data == 'random':
        randomlearn(call.message)

    if call.data == 'search':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
        bot.register_next_step_handler(call.message, searchname)


def deletename(message):
    termname = message.text
    cursor.execute("DELETE FROM term WHERE termin = ?", (termname,))
    con.commit()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ—Ä–º–∏–Ω–∞")
    button2 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥")
    markup.add(button1, button2)
    bot.send_message(message.chat.id, "‚úî–î–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω —É–¥–∞–ª—ë–Ω", reply_markup=markup)


def searchname(message):
    numberstr = message.text
    cursor.execute("SELECT * FROM term WHERE termin = ?", (numberstr,))
    terminlist = cursor.fetchall()
    value = len(terminlist)
    if value == 0:
        bot.send_message(message.chat.id, text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞")
    else:
        for str in terminlist:
            bot.send_message(message.chat.id, text=(f"{str[1]} ‚Äî {str[2]}"))


def randomlearn(message):
    cursor.execute("SELECT COUNT(*) FROM term")
    list4.append(cursor.fetchone()[0])
    list4.append(random.randint(1, list4[0] + 1))
    cursor.execute("SELECT termintext FROM term WHERE id = ?", (list4[1],))
    list4.append(cursor.fetchall())
    bot.send_message(message.chat.id, text=(list4[2]))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    bot.register_next_step_handler(message, checkrandom)


def checkrandom(message):
    cursor.execute("SELECT termin FROM term WHERE id = ?", (list4[1],))
    message1 = cursor.fetchone()[0]
    if message.text == message1:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–£—á–∏—Ç—å c–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω‚û°")
        btn2 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "‚úî–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=markup)
        list4.clear()
    else:
        bot.send_message(message.chat.id, "‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        bot.register_next_step_handler(message, checkrandom)


def database(con):
    cursor.execute("""CREATE TABLE IF NOT EXISTS term
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    termin TEXT,
                    termintext TEXT)""")
    con.commit()


bot.polling(none_stop=True)
